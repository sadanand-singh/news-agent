---
export interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div 
  id={id}
  class="modal fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4"
  role="dialog"
  aria-hidden="true"
>
  <div class="modal-content bg-gray-800 rounded-lg max-w-4xl max-h-[90vh] overflow-y-auto shadow-xl">
    <!-- Modal Header -->
    <div class="sticky top-0 bg-gray-800 border-b border-gray-700 px-6 py-4 flex items-center justify-between">
      <h2 class="modal-title text-xl font-bold text-gray-100"></h2>
      <button 
        class="modal-close text-gray-500 hover:text-gray-400 transition-colors"
        aria-label="Close modal"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Modal Body -->
    <div class="px-6 py-4">
      <!-- Date and Sources -->
      <div class="flex items-center justify-between mb-4 text-sm text-gray-400">
        <time class="modal-date font-medium"></time>
        <div class="modal-source-count"></div>
      </div>
      
      <!-- Full Summary -->
      <div class="prose prose-gray max-w-none mb-6">
        <div class="modal-summary text-gray-300 leading-relaxed text-justify"></div>
      </div>
      
      <!-- Sources -->
      <div class="border-t border-gray-700 pt-4">
        <h4 class="text-sm font-medium text-gray-300 uppercase tracking-wide mb-3">
          Sources
        </h4>
        <div class="modal-sources flex flex-wrap gap-2"></div>
      </div>
    </div>
  </div>
</div>

<script>
  // Modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.querySelector('.modal') as HTMLElement;
    const modalContent = modal?.querySelector('.modal-content') as HTMLElement;
    const closeButton = modal?.querySelector('.modal-close') as HTMLElement;
    
    if (!modal || !modalContent || !closeButton) return;
    
    // Close modal function
    const closeModal = () => {
      modal.classList.add('hidden');
      modal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
    };
    
    // Open modal function
    const openModal = () => {
      modal.classList.remove('hidden');
      modal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
    };
    
    // Close button click
    closeButton.addEventListener('click', closeModal);
    
    // Click outside modal to close
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Escape key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
    
    // Expose functions globally for other components
    (window as any).openNewsModal = (newsData: any) => {
      const titleEl = modal.querySelector('.modal-title') as HTMLElement;
      const dateEl = modal.querySelector('.modal-date') as HTMLElement;
      const sourceCountEl = modal.querySelector('.modal-source-count') as HTMLElement;
      const summaryEl = modal.querySelector('.modal-summary') as HTMLElement;
      const sourcesEl = modal.querySelector('.modal-sources') as HTMLElement;
      
      if (titleEl) titleEl.textContent = newsData.title;
      if (dateEl) dateEl.textContent = newsData.formattedDate;
      if (sourceCountEl) sourceCountEl.textContent = `${newsData.sources.length} source${newsData.sources.length !== 1 ? 's' : ''}`;
      if (summaryEl) summaryEl.textContent = newsData.summary;
      
      if (sourcesEl) {
        sourcesEl.innerHTML = newsData.sources.map((source: string) => {
          const domain = new URL(source).hostname.replace('www.', '');
          return `
            <a 
              href="${source}"
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-900/30 text-blue-300 hover:bg-blue-800/50 transition-colors duration-150"
            >
              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              ${domain}
            </a>
          `;
        }).join('');
      }
      
      openModal();
    };
  });
</script>

<style>
  .modal {
    backdrop-filter: blur(4px);
  }
  
  .modal-content {
    animation: modalSlideIn 0.3s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
</style> 